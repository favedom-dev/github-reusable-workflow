name: Flyway Docker Build

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
    paths:
      - '${APP_NAME}/**'
      - 'docker/**'
      - '**/Dockerfile'

env:
  NAME: '${APP_NAME}'

jobs:

  workaround-env:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    outputs:
      NAME: ${{ env.NAME }}
    steps:
      - run: exit 0

  lint-sql:
    uses: favedom-dev/github-reusable-workflow/.github/workflows/lint-sql.yaml@master
    if: github.event_name == 'pull_request'
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  repo-version:
    uses: favedom-dev/github-reusable-workflow/.github/workflows/repo-version.yaml@master
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  docker:
    uses: favedom-dev/github-reusable-workflow/.github/workflows/flyway-docker-build.yaml@master
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    needs: [repo-version, workaround-env]
    with:
      NAME: ${{ needs.workaround-env.outputs.NAME }}
      VERSION: ${{ needs.repo-version.outputs.version }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      WIF_PROVIDER: '${{ secrets.WIF_PROVIDER }}'
      WIF_SERVICE_ACCOUNT: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

  staging:
    uses: favedom-dev/github-reusable-workflow/.github/workflows/deploy-env.yaml@master
    needs: [workaround-env, docker]
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    with:
      NAME: ${{ needs.workaround-env.outputs.NAME }}
      VERSION: ${{ needs.repo-version.outputs.version }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  # deploy:
  #   uses: favedom-dev/github-reusable-workflow/.github/workflows/flyway-cloud-run-job.yaml@master
  #   needs: docker
  #   with:
  #     NAME: 'peeq-tracking-db'
  #     JOB_NAME: 'staging-peeq-tracking-db'
  #     CLOUDSQL_INSTANCES: 'favedom-dev:us-central1:mysql-peeq-staging'
  #     CLOUD_SQL_CONNECTION_NAME: 'favedom-dev:us-central1:mysql-peeq-staging'
  #     DB_DRIVER: "jdbc:mysql:"
  #     DB_HOST: 127.0.0.1
  #     DB_PORT: 3306
  #     DB_NAME: 'peeqtrackingdb'
  #     DB_USER: 'peeqtracking'
  #     DB_PASSWORD: 'peeq-staging_MYSQL_TRACKING_PASSWORD:latest'
  #     SQL_PROXY_KEY: 'peeq-staging_SQL_PROXY_KEY:latest'
  #   secrets:
  #     WIF_PROVIDER: '${{ secrets.WIF_PROVIDER }}'
  #     WIF_SERVICE_ACCOUNT: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
