name: Terraform Kubernetes Cluster

on:
  workflow_call:
    inputs:
      NAME:  # name of cluster
        required: true
        type: string
      TERRAFORM_VERSION:
        default: '1.3.5'
        required: false
        type: string
      DO_TERRAFORM_FORMAT:
        default: true  # true do terraform apply | false skip terraform apply
        required: false
        type: boolean
      DO_TERRAFORM_PLAN:
        default: true  # true do terraform apply | false skip terraform apply
        required: false
        type: boolean
      DO_TERRAFORM_APPLY:
        default: true  # true do terraform apply | false skip terraform apply
        required: false
        type: boolean
      PROJECT_ID:
        default: 'favedom-dev'
        required: false
        type: string
      GH_ORG:
        default: 'favedom-dev'
        required: false
        type: string
      GH_USER:
        default: 'velocityz-0x-pq-github'
        required: false  # true
        type: string
      JOBS_TIMEOUT:
        default: 15
        required: false
        type: number

    secrets:
      GH_TOKEN:
        required: true
      WIF_PROVIDER:  # Workload Identity Federation Provider
        required: true
      WIF_SERVICE_ACCOUNT:  # Workload Identity Federation Service Account
        required: true
      CASTAI_API_TOKEN:
        required: false

jobs:
  terraform:
    timeout-minutes: ${{ inputs.JOBS_TIMEOUT }}
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:

      # Required for modules.source git
      - name: "üîß Git config"
        run: |
          git config --global user.email ""
          git config --global user.name "${{ inputs.GH_USER }}"
          git config --global url."https://${{ inputs.GH_USER }}:${{ secrets.GH_TOKEN }}@github.com/${{ inputs.GH_ORG }}".insteadOf "https://github.com/${{ inputs.GH_ORG }}"

      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v3

      # Required for backend tfstate files in google bucket
      - name: "üîß Google Auth Token"
        if: ${{ !env.ACT }}
        id: auth-gcp-token
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      # - name: "üîß Install Terraform"
      #   id: install-terraform
      #   run: |
      #     wget -O terraform.zip https://releases.hashicorp.com/terraform/${{ inputs.TERRAFORM_VERSION }}/terraform_${{ inputs.TERRAFORM_VERSION }}_linux_amd64.zip \
      #     && \
      #     unzip terraform.zip && chmod +x terraform && sudo mv terraform /usr/local/bin

      # https://github.com/hashicorp/setup-terraform
      - name: "üîß Setup Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}

      - name: "Terraform version"
        run: terraform -version

      - name: "Terraform tfvars file"
        id: tfvars-arg
        run: |
          # file names should be *.tfvars.tmpl
          ls *.tfvars.tmpl
          rc=$?
          if [ ${rc} -eq 0 ]; then
            for f in $(ls *.tfvars.tmpl); do
              envsubst < ${f} > ${f%.*}
            done
            for f in $(ls *.tfvars); do
              TFVARS_ARG="-var-file=\"${f}\" ${TFVARS_ARG}"
            done
          fi
          echo "TFVARS_ARG: ${TFVARS_ARG}"
          echo "TFVARS_ARG=${TFVARS_ARG}" >> $GITHUB_OUTPUT

      # https://developer.hashicorp.com/terraform/cli/commands/fmt
      # if step fails user should run `terraform fmt -diff`` locally and commit updates
      - name: "Terraform Format"
        id: terraform-format
        if: inputs.DO_TERRAFORM_FORMAT == true
        run: terraform fmt -check

      # https://developer.hashicorp.com/terraform/cli/commands/init
      - name: "Terraform init"
        id: terraform-init
        run: terraform init

      # https://developer.hashicorp.com/terraform/cli/commands/validate
      - name: "Terraform validate"
        id: terraform-validate
        # if: github.event_name == 'pull_request'
        run: terraform validate

      # https://developer.hashicorp.com/terraform/cli/commands/plan
      # - name: "Terraform plan"
      #   id: terraform-plan
      #   # if: github.event_name == 'pull_request' && inputs.DO_TERRAFORM_PLAN == true
      #   if: inputs.DO_TERRAFORM_PLAN == true
      #   env:
      #     TFVARS_ARG: ${{ steps.tfvars-arg.outputs.TFVARS_ARG }}
      #   # run: terraform plan ${TFVARS_ARG} -out=tfplan
      #   run: terraform plan ${TFVARS_ARG}

      # https://developer.hashicorp.com/terraform/cli/commands/apply
      - name: "Terraform apply"
        id: terraform-apply
        if: github.event_name != 'pull_request' && inputs.DO_TERRAFORM_APPLY == true
        env:
          TFVARS_ARG: ${{ steps.tfvars-arg.outputs.TFVARS_ARG }}
        run: terraform apply -auto-approve ${TFVARS_ARG}
