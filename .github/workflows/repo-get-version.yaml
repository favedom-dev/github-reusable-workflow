name: Repo Get Version

# To use version add to job `needs: get-version`
# Then version is accessible via ${{ needs.++JOB++.outputs.version }} || ${{ needs.get-version.outputs.version }}

on:  # yamllint disable-line rule:truthy
  workflow_call:
    secrets:
      GH_TOKEN:  # GitHub token
        required: true
    outputs:
      version:
        description: "Repo Version"
        value: ${{ jobs.repo-get-version.outputs.version }}

jobs:

  repo-get-version:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    outputs:
      # version: ${{ steps.version.outputs.version  }}
      version: ${{ steps.set-version.outputs.version  }}
    steps:

      # - name: "GITHUB INFO"
      #   env:
      #     GITHUB_CONTEXT: ${{ toJSON(github) }}
      #   run: |-
      #     echo "PR number         : ${{ github.event.pull_request.number }}"
      #     echo "github.event_name : ${{ github.event_name }}"
      #     echo "--------------------------------------"

      - name: Set PR Version
        id: pr-version
        if: github.event_name == 'pull_request'
        run: |
          echo "::set-output name=version::0.0.0-SNAPSHOT-PR-${{ github.event.number }}-${{ github.run_number }}"

      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v3
        if: github.event_name != 'pull_request'
        with:
          fetch-depth: 0

      - name: "‚òë Release version"
        id: version
        uses: rymndhng/release-on-push-action@master
        if: github.event_name != 'pull_request'
        with:
          bump_version_scheme: patch
          tag_prefix: ""
          dry_run: true

      - name: "üìú Set  version"
        id: set-version
        env:
          PR_VERSION: ${{ steps.pr-version.outputs.version }}
        run: |
          echo "PR_VERSION: ${{ env.PR_VERSION }}"
          if [ ${{ env.PR_VERSION }} ]; then
            echo "PR VERSION: ${{ steps.pr-version.outputs.version }}"
            echo "::set-output name=version::${{ steps.pr-version.outputs.version }}"
          else
            echo "RELEASE VERSION: ${{ steps.version.outputs.version }}"
            echo "::set-output name=version::${{ steps.version.outputs.version }}"
          fi
          echo "${{ steps.version.outputs.version }}"

      - name: "üìú Display version"
        run: |
          echo "set-version : ${{ steps.set-version.outputs.version }}"
