name: Preview Environment

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      NAME:  # name of service, (ex: peeq-tracking)
        required: true
        type: string
      VERSION:
        required: true
        type: string
      PREVIEW_BASE_DOMAIN:
        default: 'staging.joinpeeq.com'
        required: false
        type: string
      PREVIEW_HEALTHCHECK:
        default: ''  # /api/++SERVICE++/acutuator/health
        required: false
        type: string
      CLUSTER_NAME:
        default: 'favedom-dev'
        required: false
        type: string
      LOCATION:
        default: 'us-central1-a'
        required: false
        type: string
      DOCKER_REGISTRY:
        default: 'us-central1-docker.pkg.dev'
        required: false
        type: string
      DOCKER_REGISTRY_NAME:
        default: 'peeq-docker'
        required: false
        type: string
      ENABLE_HELM_DEBUG:
        default: false
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true
      WIF_PROVIDER:  # Workload Identity Federation Provider
        required: true
      WIF_SERVICE_ACCOUNT:  # Workload Identity Federation Service Account
        required: true
jobs:

  preview-environment:
    timeout-minutes: 10
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:

      - name: "NOTES"
        run: |
          echo "Preview: ${{ inputs.NAME }} ${{ inputs.VERSION }}"
          echo "STEPS:"
          echo "1. Create Namespace (pr-${{ inputs.NAME }}-${{ github.event.number }})"
          echo "2. Copy Secrets"
          echo "3. Deploy"
          echo "------------------"
          echo "OPTIONS:"
          echo "1. Do completely with GH Actions -- Currently this approach"
          echo "2. GH Actions using Argo CD"

      - name: "Enable helm debug"
        if: inputs.ENABLE_HELM_DEBUG == true
        run: |
          echo "HELM_DEBUG_FLAG=--debug" >> $GITHUB_ENV

      - uses: azure/setup-helm@v3
        with:
          version: 'v3.7.2'
        id: install

      - name: "☁️ Checkout repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "🔧 Google Auth"
        if: ${{ !env.ACT }}
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ inputs.CLUSTER_NAME }}
          location: ${{ inputs.LOCATION }}

      - name: "Set Name for PR namespace"
        id: set-name-pr-namespace
        run: |
         echo "::set-output name=PR_NAMESPACE::pr-${{ inputs.NAME }}-${{ github.event.number }}"

      - name: "Create namespace: ${{ steps.set-name-pr-namespace.outputs.PR_NAMESPACE }}"
        env:
          PREVIEW_NAMESPACE: ${{ steps.set-name-pr-namespace.outputs.PR_NAMESPACE }}
        run: |
          echo "Create Preview Namespace: ${PREVIEW_NAMESPACE} "
          kubectl create namespace ${PREVIEW_NAMESPACE} --dry-run=client -o json | kubectl apply -f -
          kubectl config set-context $(kubectl config current-context) --namespace ${PREVIEW_NAMESPACE}

      - name: "Copy secrets"
        env:
          PREVIEW_NAMESPACE: ${{ steps.set-name-pr-namespace.outputs.PR_NAMESPACE }}
        working-directory: scripts
        run: |
          wget https://raw.githubusercontent.com/favedom-dev/github-reusable-workflow/master/scripts/preview_copy_secrets.sh
          chmod 777 ./preview_copy_secrets.sh ./preview_secrets.sh
          pwd
          ls -la
          ./preview_secrets.sh ${PREVIEW_NAMESPACE}

      - name: "Update charts"
        working-directory: ./charts/preview
        env:
          APP_NAME: ${{ inputs.NAME }}
          PREVIEW_NAMESPACE: ${{ steps.set-name-pr-namespace.outputs.PR_NAMESPACE }}
          PREVIEW_VERSION: ${{ inputs.VERSION }}
          DOCKER_REGISTRY: ${{ inputs.DOCKER_REGISTRY }}
          DOCKER_REGISTRY_NAME: ${{ inputs.DOCKER_REGISTRY_NAME }}
        run: |
          echo "APP_NAME            : ${APP_NAME}"
          echo "DOCKER_REGISTRY     : ${DOCKER_REGISTRY}"
          echo "DOCKER_REGISTRY_NAME: ${DOCKER_REGISTRY_NAME}"
          echo "PREVIEW_NAMESPACE   : ${PREVIEW_NAMESPACE}"
          echo "PREVIEW_VERSION     : ${PREVIEW_VERSION}"
          echo "=================================="
          sed -i -e "s/version:.*/version: ${PREVIEW_VERSION}/" Chart.yaml
          sed -i -e "s/version:.*/version: ${PREVIEW_VERSION}/" ../*/Chart.yaml
          sed -i -e "s|repository:.*|repository: ${DOCKER_REGISTRY}\/favedom-dev\/${DOCKER_REGISTRY_NAME}\/${APP_NAME}|" values.yaml
          sed -i -e "s/tag:.*/tag: ${PREVIEW_VERSION}/" values.yaml
          echo "  version: ${PREVIEW_VERSION}" >> requirements.yaml

      - name: "DEBUG charts"
        working-directory: ./charts/preview
        run: |
          echo "DEBUG"
          echo "=================================="
          echo "Chart.yaml"
          cat Chart.yaml
          echo "=================================="
          echo "../${{ inputs.NAME }}/Chart.yaml"
          cat ../${{ inputs.NAME }}/Chart.yaml
          echo "=================================="
          echo "values.yaml"
          cat values.yaml
          echo "=================================="
          echo "requirements.yaml"
          cat requirements.yaml

      - name: "Port forward"
        run: 'kubectl -n jx port-forward svc/jenkins-x-chartmuseum 8080:8080 &'

      - name: "Helm"
        working-directory: ./charts/preview
        run: |
          echo "HELM_DEBUG_FLAG: ${HELM_DEBUG_FLAG}"
          echo "=================================="
          helm repo add jenkins-x-chartmuseum http://localhost:8080
          echo "=================================="
          echo "RUN: helm repo list"
          helm repo list
          echo "=================================="
          echo "RUN: helm dependency update"
          helm dependency update ${HELM_DEBUG_FLAG}
          echo "=================================="
          echo "RUN: helm dependency build"
          helm dependency build ${HELM_DEBUG_FLAG}
          echo "=================================="
          echo "RUN: helm lint "
          helm lint ${HELM_DEBUG_FLAG}
          echo "=================================="
          echo "RUN: helm template ."
          helm template . ${HELM_DEBUG_FLAG}
          echo "=================================="
          echo "RUN: helm package ."
          helm package . ${HELM_DEBUG_FLAG}

      - name: "Helm upgrade/install"
        env:
          NAME: ${{ inputs.NAME }}
        working-directory: ./charts/preview
        run: |
          echo "NAME           : ${NAME}"
          echo "HELM_DEBUG_FLAG: ${HELM_DEBUG_FLAG}"
          # helm upgrade --install ${NAME} .
          helm upgrade --install ${HELM_DEBUG_FLAG} ${NAME} .

      - name: "🌐 Link to Preview"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PREVIEW_NAMESPACE: ${{ steps.set-name-pr-namespace.outputs.PR_NAMESPACE }}
          PREVIEW_URL: https://${{ steps.set-name-pr-namespace.outputs.PR_NAMESPACE }}.${{ inputs.PREVIEW_BASE_DOMAIN }}
          PREVIEW_HEALTHCHECK: ${{ inputs.PREVIEW_HEALTHCHECK }}
          PR_BODY: pr_body.md
# yamllint disable
        run: |-
          echo "${PREVIEW_URL}"
          # START: body message file
          echo "🌐 PR built and available in a preview environment ${{ inputs.NAME }} pr ${{ github.event.number }}:" > ${PR_BODY}
          echo "- [preview](${PREVIEW_URL})" >> ${PR_BODY}
          if [ ${#PREVIEW_HEALTHCHECK}  -gt 0 ]; then
            echo "- [healthcheck](${PREVIEW_URL}${PREVIEW_HEALTHCHECK})" >> ${PR_BODY}
          fi
          echo "===="
          cat ${PR_BODY}
          echo "===="
          # END: body message file
          gh pr comment ${{ github.event.number }} --body-file ${PR_BODY}
# yamllint enable
