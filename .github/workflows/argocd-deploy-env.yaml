name: Deploy Environment

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      NAME:  # name of component, (ex: peeq-tracking)
        required: true
        type: string
      VERSION:
        required: true
        type: string
      MONOREPO_APP:
        default: ''
        required: false
        type: string
      ARGOCD_APP_NAME:
        required: false
        type: string
      REMOVE_PEEQ_PREFIX:
        default: true  # true removes "peeq-" | false keeps input.NAME
        required: false
        type: boolean
      ENV_REPO_NAME:
        default: 'favedom-dev/argocd-deployments'
        required: false
        type: string
      ENV_REPO_PATH:
        default: 'env-repo'
        required: false
        type: string
      ENV_REPO_SUBDIR_BASE:
        # default: 'dev/fanfuzenil'
        default: 'dev/tmp-fanfuzenil'
        required: false
        type: string
      ENV_REPO_SUBDIR:
        # default: 'favedom-dev/peeq/${{ inputs.NAME }}'
        required: false
        type: string
      OVERRIDE_SUBDIR_NAME:
        required: false
        type: string
      DO_PR_MERGE:
        default: 'true'
        required: false
        type: string

      VERSION_SCRIPT_BASE_URL:
        default: 'https://raw.githubusercontent.com/favedom-dev/github-reusable-workflow/master/scripts'
        required: false
        type: string
      VERSION_SCRIPT_NAME:
        default: ''  # 'update_component_version.sh'
        required: false
        type: string
      YAML_FILE:
        default: 'requirements.yaml'
        required: false
        type: string
      YAML_ELEMENT:
        default: 'dependencies'
        required: false
        type: string
      YAML_UPDATE_ELEMENT:
        default: 'version'
        required: false
        type: string
      # ELEMENT_NAME_1:
      #   default: 'name'
      #   required: false
      #   type: string
      # ELEMENT_NAME_2:
      #   default: 'version'
      #   required: false
      #   type: string
      SED_GCR_REPO:
        default: 'gcr.io\/favedom-dev\/'
        required: false
        type: string
      SED_GAR_REPO:
        # default: 'us-central1-docker.pkg.dev\/favedom-dev\/peeq-docker\/'
        default: 'us-central1-docker.pkg.dev\/favedom-dev\/docker\/'
        required: false
        type: string
    secrets:
      GH_TOKEN:  # GitHub token
        required: true

jobs:

  deploy-environment:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:

      - name: "DEBUG: inputs"
        run: |
          echo "NAME                    : ${{ inputs.NAME }}"
          echo "VERSION                 : ${{ inputs.VERSION }}"
          echo "MONOREPO_APP            : ${{ inputs.MONOREPO_APP }}"
          echo "ARGOCD_APP_NAME         : ${{ inputs.ARGOCD_APP_NAME }}"
          echo "REMOVE_PEEQ_PREFIX      : ${{ inputs.REMOVE_PEEQ_PREFIX }}"
          echo "ENV_REPO_NAME           : ${{ inputs.ENV_REPO_NAME }}"
          echo "ENV_REPO_PATH           : ${{ inputs.ENV_REPO_PATH }}"
          echo "ENV_REPO_SUBDIR_BASE    : ${{ inputs.ENV_REPO_SUBDIR_BASE }}"
          echo "ENV_REPO_SUBDIR         : ${{ inputs.ENV_REPO_SUBDIR }}"
          echo "OVERRIDE_SUBDIR_NAME    : ${{ inputs.OVERRIDE_SUBDIR_NAME }}"
          echo "VERSION_SCRIPT_BASE_URL : ${{ inputs.VERSION_SCRIPT_BASE_URL }}"
          echo "VERSION_SCRIPT_NAME     : ${{ inputs.VERSION_SCRIPT_NAME }}"
          echo "YAML_FILE               : ${{ inputs.YAML_FILE }}"
          echo "YAML_ELEMENT            : ${{ inputs.YAML_ELEMENT }}"
          echo "YAML_UPDATE_ELEMENT     : ${{ inputs.YAML_UPDATE_ELEMENT }}"
          echo "SED_GCR_REPO            : ${{ inputs.SED_GCR_REPO }}"
          echo "SED_GAR_REPO            : ${{ inputs.SED_GAR_REPO }}"

      - name: "Set ARGOCD_APP_NAME"
        id: set-argocd-app-name
        env:
          REMOVE_PEEQ_PREFIX: ${{ inputs.REMOVE_PEEQ_PREFIX }}
        run: |
          ARGOCD_APP_NAME=${{ inputs.ARGOCD_APP_NAME }}
          if [ ! -n "${ARGOCD_APP_NAME}" ]; then
            APP_PREFIX=$(echo ${{ inputs.name }} | cut -f 1 -d '-')
            echo "APP_PREFIX : ${APP_PREFIX}"
            case "${APP_PREFIX}" in
              "peeq")
                REMOVE_STR="peeq-";;
              "pvz")
                REMOVE_STR="pvz-";;
              *)
                echo "INFO: No string to remove"
            esac
            # ARGOCD_APP_NAME=$(echo ${{ inputs.name }} | sed 's/peeq-//')
            echo "REMOVE_STR  : ${REMOVE_STR}"
            if [ -z "$REMOVE_STR" ]; then
              echo "REMOVE_STR not set"
              ARGOCD_APP_NAME=$(echo ${{ inputs.name }})
            else
            echo "REMOVE_STR set"
            ARGOCD_APP_NAME=$(echo ${{ inputs.name }} | sed 's/'"${REMOVE_STR}"'//')
            fi
          fi
          echo "ARGOCD_APP_NAME=${ARGOCD_APP_NAME}" >> $GITHUB_OUTPUT

      - name: "🔧 Git config"
        if: github.ref == 'refs/heads/master'
        run: |
          git config --global user.email ""
          git config --global user.name "velocityz-0x-pq-github"

      - name: "☁️ Checkout environment repository: ${{ inputs.ENV_REPO_NAME }}"
        if: github.ref == 'refs/heads/master'
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.ENV_REPO_NAME }}
          token: ${{ secrets.GH_TOKEN }}
          ref: master
          path: ${{ inputs.ENV_REPO_PATH }}

      - name: "📜 Set ENV_REPO_SUBDIR"
        id: set-env-repo-subdir
        env:
          OVERRIDE_SUBDIR_NAME: ${{ inputs.OVERRIDE_SUBDIR_NAME }}
          # SUBDIR_NAME: ${{ inputs.NAME }}
          SUBDIR_NAME: ${{ steps.set-argocd-app-name.outputs.ARGOCD_APP_NAME }}
        run: |
          echo "SUBDIR_NAME         : ${SUBDIR_NAME}"
          echo "OVERRIDE_SUBDIR_NAME: ${OVERRIDE_SUBDIR_NAME}"
          if [ -n "${ENV_REPO_SUBDIR}" ]; then
            ENV_REPO_SUBDIR=${{ inputs.ENV_REPO_SUBDIR }}
            echo "if ENV_REPO_SUBDIR: ${ENV_REPO_SUBDIR}"
          else
            if [ -n "${OVERRIDE_SUBDIR_NAME}" ]; then
              SUBDIR_NAME=${{ inputs.OVERRIDE_SUBDIR_NAME }}
            fi
            ENV_REPO_SUBDIR=${{ inputs.ENV_REPO_SUBDIR_BASE }}/${SUBDIR_NAME}
            echo "else ENV_REPO_SUBDIR: ${ENV_REPO_SUBDIR}"
          fi
          echo "ENV_REPO_SUBDIR: ${ENV_REPO_SUBDIR}"
          echo "ENV_REPO_SUBDIR=${ENV_REPO_SUBDIR}" >> $GITHUB_OUTPUT

      - name: "DEBUG: PRE ./${{ inputs.YAML_FILE }}"
        if: github.ref == 'refs/heads/master'
        # working-directory: ${{ inputs.ENV_REPO_PATH }}/${{ inputs.ENV_REPO_SUBDIR }}
# yamllint disable-line
        working-directory: ${{ inputs.ENV_REPO_PATH }}/${{ steps.set-env-repo-subdir.outputs.ENV_REPO_SUBDIR }}
        run: |
          pwd
          cat ./${{ inputs.YAML_FILE }}

      - name: "Update ${{ steps.set-argocd-app-name.outputs.ARGOCD_APP_NAME }} version ${{ inputs.VERSION }} in environment repo: ${{ inputs.YAML_FILE }}"
        if: github.ref == 'refs/heads/master'
        # working-directory: ${{ inputs.ENV_REPO_PATH }}/${{ inputs.ENV_REPO_SUBDIR }}
# yamllint disable-line
        working-directory: ${{ inputs.ENV_REPO_PATH }}/${{ steps.set-env-repo-subdir.outputs.ENV_REPO_SUBDIR }}
        env:
          VERSION_SCRIPT_NAME: ${{ inputs.VERSION_SCRIPT_NAME }}
          # NAME: ${{ inputs.NAME }}
          NAME: ${{ steps.set-argocd-app-name.outputs.ARGOCD_APP_NAME }}
          VERSION: ${{ inputs.VERSION }}
          YAML_FILE: ${{ inputs.YAML_FILE }}
          # ELEMENT_NAME_1: ${{ inputs.ELEMENT_NAME_1 }}
          # ELEMENT_NAME_2: ${{ inputs.ELEMENT_NAME_2 }}
          SED_GCR_REPO: ${{ inputs.SED_GCR_REPO }}
          SED_GAR_REPO: ${{ inputs.SED_GAR_REPO }}
# yamllint disable rule:line-length
        run: |
          if [ ${#VERSION_SCRIPT_NAME} -gt 0 ]; then
            wget ${{ inputs.VERSION_SCRIPT_BASE_URL }}/${VERSION_SCRIPT_NAME}
            chmod 777 ./${VERSION_SCRIPT_NAME}
            ./${VERSION_SCRIPT_NAME}
            rm ./${VERSION_SCRIPT_NAME}
          else
            yq \
            eval \
            --prettyPrint \
            "(.${{ inputs.YAML_ELEMENT }}[] | select(has(\"name\")) | select(.name == \"${{ inputs.NAME }}\")).${{ inputs.YAML_UPDATE_ELEMENT }} = \"${{ inputs.VERSION }}\"" \
            -i ./${{ inputs.YAML_FILE }}
          fi
# yamllint enable rule:line-length

      - name: "DEBUG: POST ./${{ inputs.YAML_FILE }}"
        if: github.ref == 'refs/heads/master'
        # working-directory: ${{ inputs.ENV_REPO_PATH }}/${{ inputs.ENV_REPO_SUBDIR }}
        # yamllint disable-line
        working-directory: ${{ inputs.ENV_REPO_PATH }}/${{ steps.set-env-repo-subdir.outputs.ENV_REPO_SUBDIR }}
        run: |
          pwd
          cat ./${{ inputs.YAML_FILE }}

      - name: "🌐 Create environment PR in repo: ${{ inputs.ENV_REPO_NAME }}"
        if: github.ref == 'refs/heads/master'
        working-directory: ${{ inputs.ENV_REPO_PATH }}
        env:
          NAME: ${{ steps.set-argocd-app-name.outputs.ARGOCD_APP_NAME }}
          VERSION: ${{ inputs.VERSION }}
          BRANCH_NAME: gha_${{ steps.set-argocd-app-name.outputs.ARGOCD_APP_NAME }}_${{ inputs.VERSION }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          MONOREPO_APP: ${{ inputs.MONOREPO_APP }}
          DO_PR_MERGE: ${{ inputs.DO_PR_MERGE }}
# yamllint disable rule:line-length
        run: |
          git checkout -b ${BRANCH_NAME}
          git status
          git commit -a -m "${NAME} ${VERSION}"
          git push -u origin ${BRANCH_NAME}
          FULL_VERSION=v${VERSION}
          if [ ${#MONOREPO_APP} -gt 0 ]; then
            FULL_VERSION=${MONOREPO_APP}/${FULL_VERSION}
          fi
          gh release view ${FULL_VERSION} -R ${{ github.repository }} --json author,tagName,url,body --template \
          'Version: [{{.tagName}}]({{.url}})

          {{.body}}
          ' >> ./GH_RELEASE_NOTES.txt
          GH_BODY=$(cat ./GH_RELEASE_NOTES.txt)
          gh pr create --label "approved" --title "chore: bump ${NAME} to ${VERSION}" --body "${GH_BODY}"
          if [ "${DO_PR_MERGE}" = "true" ]; then
            gh pr merge ${BRANCH_NAME} --auto --squash
          fi
# yamllint enable rule:line-length
