name: Helm Charts

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      NAME:  # name of service, (ex: peeq-tracking)
        required: true
        type: string
      VERSION:
        required: true
        type: string
      PREVIEW_NAMESPACE:
        required: true
        type: string
      BASE_CHARTS_DIR:
        default: './charts'
        required: false
        type: string
      OVERRIDE_CHARTS_DIR:
        required: false
        type: string
      OVERRIDE_CHART_APP_DIR:
        required: false
        type: string
      OVERRIDE_CHART_APP_NAME:
        required: false
        type: string
      DO_RELEASE_BUILD:
        required: false
        type: string
        # type: boolean
      DO_PREVIEW_ENVIRONMENT:
        default: true
        required: false
        type: boolean
      GAR_PROJECT_ID:
        default: 'favedom-dev'
        required: false
        type: string
      CLUSTER_PROJECT_ID:
        default: 'development-375017'
        required: false
        type: string
      CLUSTER_NAME:
        default: 'fanfuzenil'
        required: false
        type: string
      LOCATION:
        default: 'us-central1-a'
        required: false
        type: string
      DOCKER_REGISTRY:
        default: 'us-central1-docker.pkg.dev'  # GAR
        required: false
        type: string
      DOCKER_REGISTRY_NAME:
        default: 'peeq-docker'
        required: false
        type: string
      HELM_REGISTRY_NAME:
        default: 'peeq-helm'
        required: false
        type: string
      ENABLE_HELM_DEBUG:
        default: true
        required: false
        type: boolean
      HELM_DOCKER_REGISTRY:
        default: 'us-central1-docker.pkg.dev'  # GAR (oci://)
        required: false
        type: string
      HELM_VERSION:
        default: 'v3.7.2'
        required: false
        type: string
      HELM_ADD_REPOS:
        default: false
        required: false
        type: boolean
      HELM_ADD_REPOS_SCRIPT_NAME:
        default: 'helm_add_repos.sh'
        required: false
        type: string
      HELM_PREVIEW_ARGS:
        default: ''
        required: false
        type: string
      PREVIEW_BASE_DOMAIN:
        default: 'dev.fanfuzenil.com'
        required: false
        type: string
      API_PATH:
        default: ''  # /api/++SERVICE++/
        required: false
        type: string
      PREVIEW_HEALTHCHECK:
        default: 'actuator/health'
        required: false
        type: string
      SCRIPTS_DIR:
        default: './scripts'
        required: false
        type: string
      SECRETS_SCRIPT_NAME:
        default: 'preview_copy_secrets.sh'
        required: false
        type: string
      SCRIPTS_DOWNLOAD_BASE_URL:
        default: 'https://raw.githubusercontent.com/favedom-dev/github-reusable-workflow'
        required: false
        type: string

    secrets:
      GH_TOKEN:  # GitHub token
        required: true
      WIF_PROVIDER:  # Workload Identity Federation Provider
        required: true
      WIF_SERVICE_ACCOUNT:  # Workload Identity Federation Service Account
        required: true

jobs:

  helm-charts:
    timeout-minutes: 10
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:

      - name: "🔧 Git config"
        run: |
          git config --global user.email ""
          git config --global user.name "velocityz-0x-pq-github"

      - name: "☁️ Checkout repository: ${{ inputs.NAME }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "🔧 Setup variables"
        id: setup-variables
        env:
          GH_REF: ${{ github.ref }}
          INPUT_DO_RELEASE_BUILD: ${{ inputs.DO_RELEASE_BUILD }}
          INPUT_DO_PREVIEW_ENVIRONMENT: ${{ inputs.DO_PREVIEW_ENVIRONMENT }}
        run: |
          if [ "${GH_REF}" = "refs/heads/master" ] || [ "${INPUT_DO_RELEASE_BUILD}" = "true" ]; then
            DO_RELEASE_BUILD="true"
            DO_PREVIEW_ENVIRONMENT="false"
            echo "DEBUG: IF - INPUT_DO_RELEASE_BUILD : ${INPUT_DO_RELEASE_BUILD}"
            echo "DEBUG: IF - DO_RELEASE_BUILD : ${DO_RELEASE_BUILD}"
          else
            DO_RELEASE_BUILD="false"
            DO_PREVIEW_ENVIRONMENT="true"
            echo "DEBUG: ELSE - INPUT_DO_RELEASE_BUILD : ${INPUT_DO_RELEASE_BUILD}"
            echo "DEBUG: ELSE - DO_RELEASE_BUILD : ${DO_RELEASE_BUILD}"
            if [ "${INPUT_DO_PREVIEW_ENVIRONMENT}" = "false" ]; then
              DO_PREVIEW_ENVIRONMENT="false"
              echo "DEBUG: IF - DO_RELEASE_BUILD : ${DO_RELEASE_BUILD}"
            fi
          fi
          HELM_REGISTRY_LOCATION=${{ inputs.HELM_DOCKER_REGISTRY }}/${{ inputs.GAR_PROJECT_ID }}/${{ inputs.HELM_REGISTRY_NAME }}/${{ inputs.NAME }}
          HELM_REGISTRY_URL="https://console.cloud.google.com/artifacts/docker/${{ inputs.GAR_PROJECT_ID }}/${{ inputs.LOCATION }}/${{ inputs.HELM_REGISTRY_NAME }}/${{ inputs.NAME }}?project=${{ inputs.GAR_PROJECT_ID }}/"
          # Display values
          echo "DO_RELEASE_BUILD       : ${DO_RELEASE_BUILD}"
          echo "DO_PREVIEW_ENVIRONMENT : ${DO_PREVIEW_ENVIRONMENT}"
          echo "HELM_REGISTRY_LOCATION : ${HELM_REGISTRY_LOCATION}"
          echo "HELM_REGISTRY_URL      : ${HELM_REGISTRY_URL}"
          echo "DO_RELEASE_BUILD=${DO_RELEASE_BUILD}" >> $GITHUB_ENV
          echo "DO_RELEASE_BUILD=${DO_RELEASE_BUILD}" >> $GITHUB_OUTPUT
          echo "DO_PREVIEW_ENVIRONMENT=${DO_PREVIEW_ENVIRONMENT}" >> $GITHUB_ENV
          echo "DO_PREVIEW_ENVIRONMENT=${DO_PREVIEW_ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "HELM_REGISTRY_LOCATION=${HELM_REGISTRY_LOCATION}" >> $GITHUB_ENV
          echo "HELM_REGISTRY_LOCATION=${HELM_REGISTRY_LOCATION}" >> $GITHUB_OUTPUT
          echo "HELM_REGISTRY_URL=${HELM_REGISTRY_URL}" >> $GITHUB_ENV
          echo "HELM_REGISTRY_URL=${HELM_REGISTRY_URL}" >> $GITHUB_OUTPUT

      - name: "🔧 Enable helm debug"
        if: inputs.ENABLE_HELM_DEBUG == true
        run: |
          echo "HELM_DEBUG_FLAG=--debug" >> $GITHUB_ENV

      - name: "🔧 Set chart app name"
        id: set-chart-app-name
        env:
          CHART_APP_NAME: ${{ inputs.NAME }}
          OVERRIDE_CHART_APP_NAME: ${{ inputs.OVERRIDE_CHART_APP_NAME }}
        run: |
          echo "OVERRIDE_CHART_APP_NAME: ${OVERRIDE_CHART_APP_NAME}"
          if [ -n "${OVERRIDE_CHART_APP_NAME}" ]; then
            CHART_APP_NAME=${OVERRIDE_CHART_APP_NAME}
          fi
          echo "CHART_APP_NAME : ${CHART_APP_NAME}"
          echo "CHART_APP_NAME=${CHART_APP_NAME}" >> $GITHUB_ENV
          echo "CHART_APP_NAME=${CHART_APP_NAME}" >> $GITHUB_OUTPUT

      - name: "🔧 Set charts dir"
        id: set-charts-dir
        env:
          BASE_CHARTS_DIR: ${{ inputs.BASE_CHARTS_DIR }}
          APP_NAME: ${{ inputs.NAME }}
          GH_REF: ${{ github.ref }}
          OVERRIDE_CHARTS_DIR: ${{ inputs.OVERRIDE_CHARTS_DIR }}
          OVERRIDE_CHART_APP_DIR: ${{ inputs.OVERRIDE_CHART_APP_DIR }}
        run: |
          CHARTS_DIR=${BASE_CHARTS_DIR}/preview
          if [ -n "${OVERRIDE_CHARTS_DIR}" ]; then
            CHARTS_DIR=${{ inputs.OVERRIDE_CHARTS_DIR }}
          elif [ "${GH_REF}" == "refs/heads/master" ]; then
            if [ -n "${OVERRIDE_CHART_APP_DIR}" ]; then
              CHARTS_DIR=${BASE_CHARTS_DIR}/${OVERRIDE_CHART_APP_DIR}
            else
              CHARTS_DIR=${BASE_CHARTS_DIR}/${APP_NAME}
            fi
          fi;
          echo "CHARTS_DIR : ${CHARTS_DIR}"
          echo "CHARTS_DIR=${CHARTS_DIR}" >> $GITHUB_ENV
          echo "CHARTS_DIR=${CHARTS_DIR}" >> $GITHUB_OUTPUT

      - name: "🔧 Setup helm version: ${{ inputs.HELM_VERSION }}"
        uses: azure/setup-helm@v3
        with:
          version: ${{ inputs.HELM_VERSION }}
        id: install

      - name: "🔧 Google Auth Token"
        if: ${{ !env.ACT }}
        id: auth-gcp-token
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: "🔧 GKE credentials cluster: ${{ inputs.CLUSTER_NAME }}"
        id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ inputs.CLUSTER_NAME }}
          location: ${{ inputs.LOCATION }}
          project_id: ${{ inputs.CLUSTER_PROJECT_ID }}

      - name: "🔧 Update helm charts"
        working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}
        env:
          CHART_APP_NAME: ${{ steps.set-chart-app-name.outputs.CHART_APP_NAME }}
          VERSION: ${{ inputs.VERSION }}
          DOCKER_REGISTRY: ${{ inputs.DOCKER_REGISTRY }}
          DOCKER_REGISTRY_NAME: ${{ inputs.DOCKER_REGISTRY_NAME }}
          PROJECT_ID: ${{ inputs.GAR_PROJECT_ID }}
          GH_REF: ${{ github.ref }}
# yamllint disable rule:line-length
        run: |
          echo "CHART_APP_NAME      : ${CHART_APP_NAME}"
          echo "VERSION             : ${VERSION}"
          echo "DOCKER_REGISTRY     : ${DOCKER_REGISTRY}"
          echo "DOCKER_REGISTRY_NAME: ${DOCKER_REGISTRY_NAME}"
          echo "working-directory   : ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}"
          echo "=================================="
          echo "Chart.yaml - version: ${VERSION}"
          sed -i -e "s/version:.*/version: ${VERSION}/" Chart.yaml
          echo "values.yaml - tag: ${VERSION}"
          sed -i -e "s/tag:.*/tag: ${VERSION}/" values.yaml
          echo "GAR: repository update"
          sed -i -e "s|repository:.*|repository: ${DOCKER_REGISTRY}\/${PROJECT_ID}\/${DOCKER_REGISTRY_NAME}\/${CHART_APP_NAME}|" values.yaml
          if [ "${GH_REF}" == "refs/heads/master" ]; then
            echo "Chart.yaml - appVersion: ${VERSION}"
            echo "appVersion: ${VERSION}" >> Chart.yaml
            if [ "${{ inputs.OVERRIDE_CHART_APP_NAME }}" != "${{ inputs.OVERRIDE_CHART_APP_DIR }}" ]; then
              YAML_FILE="Chart.yaml"
              echo "Updating ${YAML_FILE} - name: ${CHART_APP_NAME}"
              sed -i -e "s|name:.*|name: ${CHART_APP_NAME}|" ${YAML_FILE}
            fi
          else
            echo "../*/Chart.yaml - version: ${VERSION}"
            sed -i -e "s/version:.*/version: ${VERSION}/" ../*/Chart.yaml
            echo "requirements.yaml - version: ${VERSION}"
            echo "  version: ${VERSION}" >> requirements.yaml
          fi

# yamllint enable rule:line-length

      # - name: "DEBUG: helm charts Before"
      #   if: inputs.ENABLE_HELM_DEBUG == true
      #   env:
      #     GH_REF: ${{ github.ref }}
      #   working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}
      #   run: |
      #     echo "DEBUG"
      #     echo "=================================="
      #     echo "Chart.yaml"
      #     cat Chart.yaml
      #     echo "=================================="
      #     echo "../${{ inputs.NAME }}/Chart.yaml"
      #     cat ../${{ inputs.NAME }}/Chart.yaml
      #     echo "=================================="
      #     echo "values.yaml"
      #     cat values.yaml
      #     echo "=================================="
      #     if [ "${GH_REF}" != "refs/heads/master" ]; then
      #       echo "requirements.yaml"
      #       cat requirements.yaml
      #     fi

      - name: "☸ Helm add repos"
        if: inputs.HELM_ADD_REPOS == true
        env:
          SCRIPT_NAME: ${{ inputs.HELM_ADD_REPOS_SCRIPT_NAME }}
        working-directory: ${{ inputs.SCRIPTS_DIR }}
        run: |
          wget -O ./${SCRIPT_NAME} ${{ inputs.SCRIPTS_DOWNLOAD_BASE_URL }}/master/scripts/${SCRIPT_NAME}
          chmod 777 ./${SCRIPT_NAME}
          ./${SCRIPT_NAME}

      - name: "🔧 [GAR] (oci://): Helm login"
        working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}
        env:
          HELM_DOCKER_REGISTRY: ${{ inputs.HELM_DOCKER_REGISTRY }}
          HELM_REGISTRY_NAME: ${{ inputs.HELM_REGISTRY_NAME }}
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          gcloud auth print-access-token | \
          helm registry login -u oauth2accesstoken \
          --password-stdin https://${HELM_DOCKER_REGISTRY}

      - name: "☸ Helm in ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}"
        working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}
        env:
          APP_NAME: ${{ inputs.NAME }}
          VERSION: ${{ inputs.VERSION }}
          HELM_DOCKER_REGISTRY: ${{ inputs.HELM_DOCKER_REGISTRY }}
        run: |
          echo "HELM_DEBUG_FLAG: ${HELM_DEBUG_FLAG}"
          echo "working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}"
          # echo "=================================="
          # echo "RUN: helm repo list"
          # helm repo list
          echo "=================================="
          echo "RUN: helm dependency update ${HELM_DEBUG_FLAG}"
          helm dependency update ${HELM_DEBUG_FLAG}
          echo "=================================="
          echo "RUN: helm dependency build ${HELM_DEBUG_FLAG}"
          helm dependency build ${HELM_DEBUG_FLAG}
          echo "=================================="
          echo "RUN: helm lint -f ./values.yaml . ${HELM_DEBUG_FLAG}"
          helm lint -f ./values.yaml .
          echo "=================================="
          echo "RUN: helm package . --version ${VERSION} ${HELM_DEBUG_FLAG}"
          helm package . --version ${VERSION} ${HELM_DEBUG_FLAG}

      # - name: "DEBUG: charts After"
      #   if: inputs.ENABLE_HELM_DEBUG == true
      #   env:
      #     GH_REF: ${{ github.ref }}
      #   working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}
      #   run: |
      #     echo "DEBUG"
      #     echo "=================================="
      #     echo "Chart.yaml"
      #     cat Chart.yaml
      #     echo "=================================="
      #     echo "../${{ inputs.NAME }}/Chart.yaml"
      #     cat ../${{ inputs.NAME }}/Chart.yaml
      #     echo "=================================="
      #     echo "values.yaml"
      #     cat values.yaml
      #     echo "=================================="
      #     if [ "${GH_REF}" != "refs/heads/master" ]; then
      #       echo "requirements.yaml"
      #       cat requirements.yaml
      #     fi

      - name: "☸ RELEASE [GAR]: Upload helm chart - ${{ inputs.HELM_REGISTRY_NAME }}"
        # if: github.ref == 'refs/heads/master'
        if: |
          github.ref == 'refs/heads/master' ||
          steps.setup-variables.outputs.DO_RELEASE_BUILD == 'true'
        working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}
        env:
          CHART_APP_NAME: ${{ steps.set-chart-app-name.outputs.CHART_APP_NAME }}
          VERSION: ${{ inputs.VERSION }}
          HELM_EXPERIMENTAL_OCI: 1  # needed for oci://
          HELM_DOCKER_REGISTRY: ${{ inputs.HELM_DOCKER_REGISTRY }}
          HELM_REGISTRY_NAME: ${{ inputs.HELM_REGISTRY_NAME }}
          PROJECT_ID: ${{ inputs.GAR_PROJECT_ID }}
# yamllint disable rule:line-length
        run: |
          helm push \
          ${CHART_APP_NAME}-${VERSION}.tgz \
          oci://${HELM_DOCKER_REGISTRY}/${PROJECT_ID}/${HELM_REGISTRY_NAME}/${CHART_APP_NAME} \
          ${HELM_DEBUG_FLAG}
# yamllint enable rule:line-length

      - name: "🌐 Link to Helm: ${{ steps.setup-variables.outputs.HELM_REGISTRY_URL }}"
        if: |
          github.ref == 'refs/heads/master' ||
          steps.setup-variables.outputs.DO_RELEASE_BUILD == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          HELM_REGISTRY_URL: ${{ steps.setup-variables.outputs.HELM_REGISTRY_URL }}
# yamllint disable rule:line-length
        run: |-
          echo "${HELM_REGISTRY_URL}"
          # if [ "${{ github.event_name }}" = "pull_request" ]; then
          #   gh pr comment ${{ github.event.number }} \
          #   --body "🐳 Helm: [${{ inputs.NAME }} ${{ inputs.VERSION }}](${HELM_REGISTRY_URL})"
          # fi
# yamllint enable rule:line-length

# START: PR ONLY
      - name: "☸ PREVIEW: Create namespace: ${{ inputs.PREVIEW_NAMESPACE }}"
        if: |
          github.ref != 'refs/heads/master' &&
          steps.setup-variables.outputs.DO_PREVIEW_ENVIRONMENT == 'true'
        env:
          PREVIEW_NAMESPACE: ${{ inputs.PREVIEW_NAMESPACE }}
        run: |
          echo "Create Preview Namespace: ${PREVIEW_NAMESPACE}"
          kubectl create namespace ${PREVIEW_NAMESPACE} --dry-run=client -o json | kubectl apply -f -
          kubectl config set-context $(kubectl config current-context) --namespace ${PREVIEW_NAMESPACE}

      - name: "🔐 PREVIEW: Copy secrets"
        if: |
          github.ref != 'refs/heads/master' &&
          steps.setup-variables.outputs.DO_PREVIEW_ENVIRONMENT == 'true'
        env:
          PREVIEW_NAMESPACE: ${{ inputs.PREVIEW_NAMESPACE }}
          SCRIPT_NAME: ${{ inputs.SECRETS_SCRIPT_NAME }}
          BRANCH_NAME: master
        working-directory: ${{ inputs.SCRIPTS_DIR }}
        run: |
          wget -O ./${SCRIPT_NAME} ${{ inputs.SCRIPTS_DOWNLOAD_BASE_URL }}/${BRANCH_NAME}/scripts/${SCRIPT_NAME}
          chmod 777 ./${SCRIPT_NAME}
          ./${SCRIPT_NAME}

      - name: "☸ PREVIEW: Helm upgrade/install"
        if: |
          github.ref != 'refs/heads/master' &&
          steps.setup-variables.outputs.DO_PREVIEW_ENVIRONMENT == 'true'
        env:
          NAME: ${{ inputs.NAME }}
          HELM_VALUES_GLOBALS: ${{ inputs.HELM_VALUES_GLOBALS }}
          HELM_PREVIEW_ARGS: ${{ inputs.HELM_PREVIEW_ARGS }}
        working-directory: ${{ steps.set-charts-dir.outputs.CHARTS_DIR }}
        run: |
          echo "NAME                   : ${NAME}"
          echo "HELM_DEBUG_FLAG        : ${HELM_DEBUG_FLAG}"
          helm upgrade --install ${NAME} -f ./values.yaml . ${HELM_PREVIEW_ARGS} ${HELM_DEBUG_FLAG}

      - name: "🌐 PREVIEW: Link to Preview"
        if: |
          github.ref != 'refs/heads/master' &&
          steps.setup-variables.outputs.DO_PREVIEW_ENVIRONMENT == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
# yamllint disable rule:line-length
          PREVIEW_NAMESPACE: ${{ inputs.PREVIEW_NAMESPACE }}
          PREVIEW_URL: https://${{ inputs.PREVIEW_NAMESPACE }}.${{ inputs.PREVIEW_BASE_DOMAIN }}
          API_PATH: ${{ inputs.API_PATH }}
          PREVIEW_API_HEALTHCHECK: ${{ inputs.API_PATH }}${{ inputs.PREVIEW_HEALTHCHECK }}
          PR_BODY: pr_body.md
        run: |-
          echo "${PREVIEW_URL}"
          # START: body message file
          echo "PR built and available in a preview environment ${{ inputs.NAME }} pr ${{ github.event.number }}:" > ${PR_BODY}
          echo "- 🌐 preview [link](${PREVIEW_URL})" >> ${PR_BODY}
          if [ ${#API_PATH}  -gt 0 ]; then
            echo "- 💓 healthcheck [${PREVIEW_API_HEALTHCHECK}](${PREVIEW_URL}${PREVIEW_API_HEALTHCHECK})" >> ${PR_BODY}
          fi
          echo "- ☸ preview namespace: ${{ inputs.PREVIEW_NAMESPACE }}" >> ${PR_BODY}
          echo "===="
          cat ${PR_BODY}
          echo "===="
          # END: body message file
          gh pr comment ${{ github.event.number }} --body-file ${PR_BODY}
# yamllint enable rule:line-length
# END: PR ONLY
