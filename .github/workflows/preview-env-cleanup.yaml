name: Preview Environment Cleanup

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      NAME:  # name of service, (ex: peeq-tracking)
        required: true
        type: string
      PREVIEW_NAMESPACE:
        required: true
        type: string
      PR_PREFIX:
        default: '0.0.0-SNAPSHOT-PR-'
        required: false
        type: string
      PROJECT_ID:
        default: 'favedom-dev'
        required: false
        type: string
      GAR_LOCATION:
        default: 'us-central1'
        required: false
        type: string
      DOCKER_REGISTRY:
        default: 'docker'
        required: false
        type: string
      CREATE_CREDENTIALS_FILE:
        default: true
        required: false
        type: boolean
      EXPORT_ENVIRONMENT_VARIABLES:
        default: true
        required: false
        type: boolean
      CLUSTER_NAME:
        default: 'fanfuzenil'
        # default: 'favedom-dev'
        required: false
        type: string
      CLUSTER_PROJECT_ID:
        default: 'development-375017'
        required: false
        type: string
      LOCATION:
        default: 'us-central1-a'
        required: false
        type: string

    secrets:
      WIF_PROVIDER:  # Workload Identity Federation Provider
        required: true
      WIF_SERVICE_ACCOUNT:  # Workload Identity Federation Service Account
        required: true
jobs:

  preview-environment-cleanup:
    timeout-minutes: 10
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:

      # - name: "GITHUB INFO"
      #   env:
      #     GITHUB_CONTEXT: ${{ toJSON(github) }}
      #   run: |-
      #     echo "PR number                         : ${{ github.event.pull_request.number }}"
      #     echo "github.event_name                 : ${{ github.event_name }}"
      #     echo "github.run_attempt                : ${{ github.run_attempt }}"
      #     echo "github.run_number                 : ${{ github.run_number }}"
      #     echo "github.event.pull_request.merged  : ${{ github.event.pull_request.merged }}"
      #     echo "==================================:=============================="
      #     echo "GITHUB_CONTEXT: ${GITHUB_CONTEXT}"

      - name: "🔧 Setup variables"
        id: setup-variables
        run: |
          PR_NUM=${{ github.event.pull_request.number }}
          echo "PR_NUM=${PR_NUM}" >> $GITHUB_ENV
          echo "PR_NUM=${PR_NUM}" >> $GITHUB_OUTPUT
          # ===
          PR_VERSION=${{ inputs.PR_PREFIX }}${PR_NUM}
          echo "PR_VERSION=${PR_VERSION}" >> $GITHUB_ENV
          echo "PR_VERSION=${PR_VERSION}" >> $GITHUB_OUTPUT
          # ===
          GAR=${{ inputs.GAR_LOCATION }}-docker.pkg.dev
          echo "GAR=${GAR}" >> $GITHUB_ENV
          echo "GAR=${GAR}" >> $GITHUB_OUTPUT
          # ===
          DOCKER_LOCATION=${GAR}/${{ inputs.PROJECT_ID }}/${{ inputs.DOCKER_REGISTRY }}/${{ inputs.NAME }}
          echo "DOCKER_LOCATION=${DOCKER_LOCATION}" >> $GITHUB_ENV
          echo "DOCKER_LOCATION=${DOCKER_LOCATION}" >> $GITHUB_OUTPUT
          # ===
          DOCKER_URL="https://console.cloud.google.com/artifacts/docker/${{ inputs.PROJECT_ID }}/${{ inputs.GAR_LOCATION }}/${{ inputs.DOCKER_REGISTRY }}/${{ inputs.NAME }}?project=${{ inputs.PROJECT_ID }}/"
          echo "DOCKER_URL=${DOCKER_URL}" >> $GITHUB_ENV
          echo "DOCKER_URL=${DOCKER_URL}" >> $GITHUB_OUTPUT
          # ===
          DOCKER_TAG_PREFIX="${PR_VERSION}-"
          echo "DOCKER_TAG_PREFIX=${DOCKER_TAG_PREFIX}" >> $GITHUB_ENV
          echo "DOCKER_TAG_PREFIX=${DOCKER_TAG_PREFIX}" >> $GITHUB_OUTPUT
          echo "==================="
          echo "GAR               : ${GAR}"
          echo "PR_NUM            : ${PR_NUM}"
          echo "PR_VERSION        : ${PR_VERSION}"
          echo "DOCKER_LOCATION   : ${DOCKER_LOCATION}"
          echo "DOCKER_URL        : ${DOCKER_URL}"
          echo "DOCKER_TAG_PREFIX : ${DOCKER_TAG_PREFIX}"

      - name: "🔧 Google Auth Token"
        id: auth-gcp-token
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
          create_credentials_file: ${{ inputs.CREATE_CREDENTIALS_FILE }}
          export_environment_variables: ${{ inputs.EXPORT_ENVIRONMENT_VARIABLES }}

      - name: "🔧 Docker Auth: GAR"
        id: auth-docker
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth-gcp-token.outputs.access_token }}'
          registry: "${{ steps.setup-variables.outputs.GAR }}"

      # https://github.com/google-github-actions/setup-gcloud
      - name: '🔧 Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: "🗑️ Delete PR ${{ steps.setup-variables.outputs.PR_NUM }} container(s)"
        run: |
          declare -a PR_TAG_LIST
          for tag in $(gcloud artifacts docker tags list ${DOCKER_LOCATION} | grep "${DOCKER_TAG_PREFIX}" | cut -f1 -d ' '); do
            CURRENT_CONTAINER="${DOCKER_LOCATION}:${tag}"
            PR_TAG_LIST[${#PR_TAG_LIST[@]}]="${tag}"
            echo ""
            echo ">>>>>>>>>>>>>>"
            echo "START DELETING: ${CURRENT_CONTAINER}"
            gcloud artifacts docker images delete "${CURRENT_CONTAINER}" --delete-tags --quiet
            echo "DONE  DELETING: ${CURRENT_CONTAINER}"
            echo "<<<<<<<<<<<<<<"
          done
          echo ""
          echo "Can verify PR containters \"${PR_VERSION}*\" deleted at URL:"
          echo "${DOCKER_URL}"
          echo "Containers removed had tags:"
          printf '%s\n' "${PR_TAG_LIST[@]}"

      - name: "🔧 Get GKE Credentials"
        id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ inputs.CLUSTER_NAME }}
          location: ${{ inputs.LOCATION }}
          project_id: ${{ inputs.CLUSTER_PROJECT_ID }}

      - name: "🗑️ Delete namespace: ${{ inputs.PREVIEW_NAMESPACE }}"
        env:
          PREVIEW_NAMESPACE: ${{ inputs.PREVIEW_NAMESPACE }}
        run: |
          if [[ $(kubectl get ns | awk '{print $1}' | grep ^${PREVIEW_NAMESPACE}$) == ${PREVIEW_NAMESPACE} ]]; then
            kubectl delete namespace ${PREVIEW_NAMESPACE}
          else
            echo "SKIPPING: namespace \"${PREVIEW_NAMESPACE}\" does not exist"
          fi
