name: Docker Build

on:
  workflow_call:
    inputs:
      NAME: # name of service, (ex: peeq-tracking-db)
        required: true
        type: string
      VERSION:
        required: true
        type: string
      PROJECT_ID:
        default: 'favedom-dev'
        required: false
        type: string
      GAR_LOCATION:
        default: 'us-central1'
        required: false
        type: string
      GCR_LOCATION:
        default: 'gcr.io'
        required: false
        type: string
      DOCKER_REGISTRY:
        default: 'peeq-docker'
        required: false
        type: string
    secrets:
      GH_TOKEN: # GitHub token
        required: true
      WIF_PROVIDER: # Workload Identity Federation Provider
        required: true
      WIF_SERVICE_ACCOUNT: # Workload Identity Federation Service Account
        required: true

jobs:

  flyway_docker:
    timeout-minutes: 10
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      DOCKER_BUILDKIT: 1
    steps:

      # - name: Display Values
      #   if: ${{ env.DEBUG }}
      #   run: |
      #     echo "NAME: ${{ inputs.NAME }}"
      #     echo "VERSION: ${{ inputs.VERSION }}"
      #     echo "PROJECT_ID: ${{ inputs.PROJECT_ID }}"
      #     echo "GAR_LOCATION: ${{ inputs.GAR_LOCATION }}"
      #     echo "GCR_LOCATION: ${{ inputs.GCR_LOCATION }}"
      #     echo "DOCKER_REGISTRY: ${{ inputs.DOCKER_REGISTRY }}"

      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "üîß Google Auth"
        if: ${{ !env.ACT }}
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: "üîß Docker Auth"
        if: ${{ !env.ACT }}
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          # registry: 'gcr.io' # Google Container Registry
          registry: '${{ inputs.GAR_LOCATION }}-docker.pkg.dev' # Google Artifact Registry

      # need the VERSION for Docker tag
      # - name: "‚òë Release version"
      #   id: version
      #   uses: rymndhng/release-on-push-action@master
      #   with:
      #     bump_version_scheme: patch
      #     tag_prefix: v
      #     dry_run: true

      # - name: Check Release version Output Parameters
      #   run: |
      #     echo "Got tag name ${{ steps.version.outputs.tag_name }}"
      #     echo "Got release version ${{ steps.version.outputs.version }}"

      - name: "üê≥ Docker: build, tag, and push"
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
# yamllint disable
          tags: ${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/${{ inputs.DOCKER_REGISTRY }}/${{ inputs.NAME }}:${{ inputs.VERSION }},${{ inputs.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/${{ inputs.DOCKER_REGISTRY }}/${{ inputs.NAME }}:latest
# yamllint enable

      - name: "üåê Link to Container"
        run: |-
          echo "https://console.cloud.google.com/artifacts/docker/${{ inputs.PROJECT_ID }}/${{ inputs.GAR_LOCATION }}/peeq-docker/${{ inputs.NAME }}?project=${{ inputs.PROJECT_ID }}/"
        # # Google Container Registry (GCR)
        # echo "https://console.cloud.google.com/gcr/images/${{ inputs.PROJECT_ID }}/global/${{ inputs.NAME }}?project=${{ inputs.PROJECT_ID }}"

      # Maybe move to indiviudal workflow
      # - name: "‚úÖ GitHub release"
      #   if: ${{ !env.ACT }}
      #   id: release
      #   uses: rymndhng/release-on-push-action@master
      #   with:
      #     bump_version_scheme: patch
      #     tag_prefix: v
